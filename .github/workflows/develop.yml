#name: Build and Release Electron App
#
#on:
#  push:
#    branches:
#      - develop
#
#jobs:
#  build-win:
#    name: Build Windows
#    runs-on: windows-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Get Version Info (Windows)
#        id: get_version
#        shell: pwsh
#        run: |
#          # Check if we're running from a branch or tag
#          if ($env:GITHUB_REF.StartsWith('refs/heads/')) {
#            # Branch-based build - use timestamp and commit hash
#            $date = Get-Date -Format "yyyyMMdd"
#            $commit = git rev-parse --short HEAD
#            $env:VERSION = "$date-$commit"
#          } else {
#            # Tag-based build - extract tag version
#            $env:VERSION = $env:GITHUB_REF -replace '^refs/tags/', ''
#          }
#
#          Write-Host "VERSION=$env:VERSION"
#          echo "VERSION=$env:VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
#
#
#      - name: Install Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 20
#
#      - name: Install Dependencies
#        shell: pwsh
#        run: npm install
#
#      - name: Build Electron App
#        shell: pwsh
#        run: npm run build
#
#      - name: Package Electron App to Win64 .msi
#        shell: pwsh
#        run: |
#          npx electron-builder --win msi --projectDir=./
#          $msiFile = Get-ChildItem ./dist -Filter "*.msi" | Select-Object -First 1
#          if ($msiFile) {
#            Rename-Item "./dist/$($msiFile.Name)" -NewName "AngularTasks-win32-x64-$env:VERSION.msi"
#            ls ./dist
#          } else {
#            Write-Error "No MSI file found in ./dist directory"
#            exit 1
#          }
#
##          Compress-Archive -Path ./MyTaskApplication-win32-x64 -DestinationPath dist/MyTaskApplication-win32-x64-$env:TAG_VERSION.zip
#
#      - name: Upload Windows Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: electron-win
#          path: dist/*.msi
#
#  build-linux:
#    name: Build Linux
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Get Tag Version (Linux)
#        id: get_version
#        shell: bash
#        run: |
#          if [[ $GITHUB_REF == refs/heads/* ]]; then
#            date=$(date '+%Y%m%d')
#            commit=$(git rev-parse --short HEAD)
#            VERSION="$date-$commit"
#          else
#            VERSION=${GITHUB_REF#refs/tags/}
#          fi
#          echo "VERSION=$VERSION" >> $GITHUB_ENV
#
#      - name: Install Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 20
#
#      - name: Install Dependencies
#        run: npm install
#        shell: bash
#
#      - name: Build Electron App
#        run: npm run build
#        shell: bash
#
#      - name: Package Electron App Linux X64
#        run: |
#          npx electron-builder --projectDir=./ --publish never
#          mv ./dist/*.AppImage ./dist/AngularTasks-Linux-x64-${TAG_VERSION}.AppImage
#          mv ./dist/*.deb ./dist/AngularTasks-Linux-x64-${TAG_VERSION}.deb
#          mv ./dist/*.snap ./dist/AngularTasks-Linux-x64-${TAG_VERSION}.snap
#        shell: bash
#
#      - name: Upload Linux Artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: electron-linux
#          path: |
#            dist/*.AppImage
#            dist/*.deb
#            dist/*.snap
#
#  build-mac:
#    name: Build macOS
#    runs-on: macos-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Get Tag Version (macOS)
#        id: get_version
#        shell: bash
#        run: |
#          if [[ $GITHUB_REF == refs/heads/* ]]; then
#            date=$(date '+%Y%m%d')
#            commit=$(git rev-parse --short HEAD)
#            VERSION="$date-$commit"
#          else
#            VERSION=${GITHUB_REF#refs/tags/}
#          fi
#          echo "VERSION=$VERSION" >> $GITHUB_ENV
#
#      - name: Install Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 20
#
#      - name: Install Dependencies
#        run: npm install
#        shell: bash
#
#      - name: Build Electron App
#        run: npm run build
#        shell: bash
#
#      - name: Package Electron App macOS
#        run: |
#          npx electron-packager ./ MyTaskApplication --platform=darwin --arch x64 --overwrite
#          npx electron-installer-dmg "./MyTaskApplication-darwin-x64/MyTaskApplication.app" "AngularTasks" --out=dist --overwrite --dmg-title="AngularTasks $TAG_VERSION"
#          mv dist/*.dmg dist/AngularTasks-macOS-x64-${TAG_VERSION}.dmg
#          ls ./dist
#        shell: bash
#
#      - name: Upload macOS Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: electron-mac
#          path: dist/AngularTasks-macOS-x64-${{ env.TAG_VERSION }}.dmg
#
#  release:
#    name: Create GitHub Release
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    needs:
#      - build-win
#      - build-linux
#      - build-mac
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Set TAG_VERSION
#        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
#        shell: bash
#
#      # Schritt 1: Letzte Commit-Nachricht erfassen
#      - name: Get Last Commit Message
#        id: get_commit
#        run: |
#          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
#          echo "LAST_COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
#          echo "$LAST_COMMIT_MESSAGE"
#          echo "EOF" >> $GITHUB_ENV
#        shell: bash
#
#      # Schritt 2: Prüfen, ob es sich um einen Merge-Commit handelt und ggf. die PR-Nummer extrahieren
#      - name: Check if commit is a merge and extract PR number
#        id: parse_pr
#        run: |
#          echo "Prüfe, ob der letzte Commit ein Merge-Commit ist:"
#          if echo "$LAST_COMMIT_MESSAGE" | grep -q "Merge pull request"; then
#            echo "Merge-Commit erkannt."
#            if [[ "$LAST_COMMIT_MESSAGE" =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
#              PR_NUMBER=${BASH_REMATCH[1]}
#              echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
#            else
#              echo "Keine PR-Nummer gefunden."
#            fi
#          else
#            echo "Kein Merge-Commit, benutze die normale Commit-Nachricht."
#            echo "PR_NUMBER=" >> $GITHUB_ENV
#          fi
#        shell: bash
#
#      # Schritt 3: Falls ein PR vorliegt, dessen Details (z. B. Beschreibung) abrufen
#      - name: Get Pull Request details if merge commit
#        if: env.PR_NUMBER != ''
#        id: get_pr
#        run: |
#          curl -s \
#            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#            -H "Accept: application/vnd.github+json" \
#            https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }} > pr.json
#
#          PR_BODY=$(jq -r .body pr.json)
#          echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV
#        shell: bash
#
#      # Schritt 4: Release-Beschreibung entsprechend zusammenbauen.
#      - name: Assemble Release Body
#        id: assemble_release_body
#        run: |
#          if [ -n "$PR_NUMBER" ]; then
#            RELEASE_BODY="Automated Electron Build Release version $TAG_VERSION\nPull Request Beschreibung:\n$PR_BODY"
#          else
#            RELEASE_BODY="Automated Electron Build Release version $TAG_VERSION\nLetzter Commit:\n$LAST_COMMIT_MESSAGE"
#          fi
#          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
#          echo -e "$RELEASE_BODY"
#          echo "EOF" >> $GITHUB_ENV
#        shell: bash
#
#      - name: Download Windows Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: electron-win
#          path: dist/
#
#      - name: Download Linux Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: electron-linux
#          path: dist/
#
#      - name: Download macOS Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: electron-mac
#          path: dist/
#
#      - name: Create GitHub Release
#        id: create_release
#        uses: softprops/action-gh-release@v2
#        with:
#          body: ${{ env.RELEASE_BODY }}
#          files: |
#            dist/AngularTasks-win32-x64-${{ env.TAG_VERSION }}.msi
#            dist/AngularTasks-Linux-x64-${{ env.TAG_VERSION }}.AppImage
#            dist/AngularTasks-Linux-x64-${{ env.TAG_VERSION }}.deb
#            dist/AngularTasks-Linux-x64-${{ env.TAG_VERSION }}.snap
#            dist/AngularTasks-macOS-x64-${{ env.TAG_VERSION }}.dmg
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
